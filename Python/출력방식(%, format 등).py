#1. %d, %f, %s를 활용

#정수-%d, 실수-%f, 문자열-%s

a=5
b=4.4
c='abc'

form1= "%d, %f, %s" %(a,b,c)

print(form1) #5, 4.400000, abc

#추천하지 않는방식

#2. "{}".format()을 활용

a=5
b=4.4
c='abc'

form2 = "{}, {}, {}".format(a,b,c)

print(form2) #5, 4.4, abc

#장점 : 데이터 타입을 신경쓰지 않고, 그냥 { } 으로만 표현해주면 됩니다. 

#단점 : 문자열이 길어지면, 들어갈 위치와 변수를 함께 확인하는 것이 어려움

#3. "변수명".format(변수명 =값)을 활용

a=5
b=4.4
c='abc'

form3 = "{a}, {b}, {c}".format(a=5, b=4.4, c='abc')

print(form3) #5, 4.4, abc

a = 5
b = 8
fmt3 = '{a} x {b} = {c}'.format(a = a, b = b, c = a*b)

print(fmt3)   #  5 x 8 = 40

#fmt4 = '{a} x {b} = {a*b}'.format(a = a, b = b)
                    # KeyError: 'a*b'

#장점1 : .format() 부분에,  앞서 작성한 { }  순서에 상관없이 값 입력 가능하다.  →  수정이 편리하다
#장점2 : 변수에 대해서 .format() 부분에 한번만 지정해주면 된다.  → 동일한 변수 반복 사용시 편리

#단점1 : 문자가 길어질 경우, 보기가 다소 불편하다는 점
#단점2 : 연산된 결과(예를 들면 위 예제와 같이 a*b 가 들어갈 경우)가 들어갈 경우 이 값을 변수로 별도 지정을 해주어야 합니다.


#4. f-string : f'{변수}' 활용

#파이썬 3.7버전부터 적용되는 문자열 포매팅으로 f-string 이라고 합니다. 

a=5
b=4.4
c='abc'

fmt6= f'{a} {b} {a*b} {c}'
print(fmt6) #5 4.4 22.0 abc

#문자열 앞에  f 를 추가하고 변수가 들어갈 부분에 { 변수/계산식 / 기타등등... } 괄호와 들어갈 변수를 넣어주면 됩니다. 
#앞에서 활용한 '{}'.format() 의 경우에는 튜플 같은 그룹은 포함할 수 없었는데, 
#문자열도 길이가 꽤  짧아졌고..어떠한 위치에, 어떠한 값/변수/계산결과가 들어갈지를 바로 확인할 수 있으니 참 편합니다.

#f-string TMI : 문자열 자리수 맞추기

a = 2
for b in range(1,10):
    fmt4 = f'{a} x {b} = {a*b}'
    print(fmt4)

a = 2
for b in range(1,10):
    fmt4 = f'{a} x {b} = {a*b:2}'     # a*b 부분에  자리수 최소 2자리수 맞추어서 표시
    print(fmt4)

#https://blog.naver.com/kiddwannabe/221962353074
